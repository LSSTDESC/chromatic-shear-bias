#!/usr/bin/env python
"""
Staging file for generating simulations and running metadetect
"""

import argparse
import copy

import yaml
import numpy as np
from loguru import logger

import fitsio
import galsim
import ngmix
import metadetect

from shear_bias_sims import run_utils


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--config",
        type=str,
        required=True,
        help="Metadetection configuration file [yaml]",
    )
    parser.add_argument(
        "--s2n-cut", type=int, default=10,
    )
    # parser.add_argument(
    #     "--jackknife", type=int, default=None,
    #     help="number of jackknife subsets to use",
    # )
    parser.add_argument(
        "--ormask-cut", type=int, default=None,
        help="Cut to make on ormask. 0 indicates make a cut, 1 indicates no cut.",
    )
    parser.add_argument(
        "--mfrac-cut", type=int, default=None,
        help="Cut to make on mfrac. Given in percentages and comma separated. Cut keeps all objects less than the given value.",
    )
    parser.add_argument("--output", type=str, required=True, nargs="*", help="Output files [fits]")
    return parser.parse_args()


def main():
    """
    Run the simulation and measurement for metadetect noise bias cancellation.
    """
    args = get_args()

    with open(args.config, "r") as fp:
        config = yaml.safe_load(fp.read())

    # copy the config for safekeeping
    _config = copy.deepcopy(config)

    logger.info(f"Measuring: {vars(args)}")

    logger.info(f"Reading and concatenating output from {args.output}")
    pdata = []
    mdata = []
    for output in args.output:
        with fitsio.FITS(output, "r") as fits:
            pdata.append(fits["plus"].read())
            mdata.append(fits["minus"].read())

    pdata = np.concatenate(pdata)
    mdata = np.concatenate(mdata)

    logger.info(f"Applying cuts")
    pmsk = (pdata["s2n_cut"] == args.s2n_cut)
    if args.ormask_cut is not None:
        pmsk = pmsk & (pdata["ormask_cut"] == args.ormask_cut)
    else:
        pmsk = pmsk & (pdata["ormask_cut"] == -1)
    if args.mfrac_cut is not None:
        pmsk = pmsk & (pdata["mfrac_cut"] == args.mfrac_cut)
    else:
        pmsk = pmsk & (pdata["mfrac_cut"] == -1)

    n_sims_msk = np.sum(pdata["weight"][pmsk])
    if n_sims_msk <= 0:
        raise RuntimeError("Cuts did not keep any sims!")
    else:
        logger.info(f"{n_sims_msk} sims pass cuts")

    logger.info(f"Measuring multiplicative and additive biases")
    m_req = 0.002
    calibration_shear = ngmix.metacal.DEFAULT_STEP
    cosmic_shear = config["shear"]["g"]
    m_est, m_std, c_est, c_std = run_utils.estimate_biases(
        pdata[pmsk], mdata[pmsk], calibration_shear, cosmic_shear,
        weights=pdata["weight"][pmsk],
    )

    logger.info(f"multiplicative bias: {m_est:.3E} +/- {m_std*3:.3E} (3 sigma)")
    logger.info(f"additive bias: {c_est:.3E} +/- {c_std*3:.3E} (3 sigma)")

    if np.abs(m_est) < 0.002:
        logger.success(f"mean multiplicative bias within nominal requirement. ({np.abs(m_est):.3E} < {m_req:.3E})")
    else:
        logger.error(f"mean multiplicative bias exceeds nominal requirement! ({np.abs(m_est):.3E} > {m_req:.3E})")


if __name__ == "__main__":
    main()
