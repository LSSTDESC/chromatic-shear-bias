#!/usr/bin/env python
"""
Staging file for generating simulations and running metadetect
"""

import argparse
import copy

import yaml
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from loguru import logger

import fitsio
import galsim


cmap = matplotlib.colors.LinearSegmentedColormap.from_list("", ["#000000", "#FFFFFF"])


def get_args():
    parser = argparse.ArgumentParser()
    # parser.add_argument(
    #     "--config",
    #     type=str,
    #     required=True,
    #     help="Metadetection configuration file [yaml]",
    # )
    parser.add_argument(
        "--sim",
        type=str,
        required=True,
        help="GalSim configuration file [yaml]",
    )
    return parser.parse_args()


def main():
    """
    Run the simulation and measurement for metadetect noise bias cancellation.
    """
    args = get_args()

    # with open(args.config, "r") as fp:
    #     config = yaml.safe_load(fp.read())

    # # copy the config for safekeeping
    # _config = copy.deepcopy(config)

    logger.info(f"Visualizing: {vars(args)}")

    rng = np.random.default_rng()

    for galsim_config in galsim.config.ReadConfig(args.sim):
        # copy the config for safekeeping
        _galsim_config = copy.deepcopy(galsim_config)

        image = galsim.config.BuildImage(galsim_config, logger=None)
        # TODO: alternatively...
        # image = galsim.config.BuildImage(galsim_config, logger=None)
        # psf = galsim.config.GetFinalExtraOutput("psf", galsim_config, logger=None)[0]
        # weight = galsim.config.GetFinalExtraOutput("weight", galsim_config, logger=None)[0]
        # badpix = galsim.config.GetFinalExtraOutput("badpix", galsim_config, logger=None)[0]

        # build the GalSim object representation of the PSF
        psf_obj = galsim.config.BuildGSObject(galsim_config, "psf", logger=None)[0]
        psf = psf_obj.drawImage()

        # build the weight array
        # TODO: we should get the weight image from GalSim as an extra output
        #       since we don't know how to do this without writing the output
        #       to a file, we will do this hack for now
        weight = np.full(
            image.array.shape, 1 / galsim_config["image"]["noise"]["sigma"] ** 2
        )

        # build the noise array
        # TODO: we should get the noise image from GalSim as an extra output
        #       since we don't know how to do this without writing the output
        #       to a file, we will do this hack for now
        noise = rng.normal(
            0, galsim_config["image"]["noise"]["sigma"], image.array.shape
        )

        fig, axs = plt.subplots(nrows=1, ncols=4)

        axs[0].imshow(image.array, origin="lower", cmap=cmap)
        axs[0].set_title("Image")

        axs[1].imshow(psf.array, origin="lower", cmap=cmap)
        axs[1].set_title("PSF")

        axs[2].imshow(weight, origin="lower", cmap=cmap)
        axs[2].set_title("Weight")

        axs[3].imshow(noise, origin="lower", cmap=cmap)
        axs[3].set_title("Noise Realization")

        for ax in axs.ravel():
            ax.set_xticks([])
            ax.set_yticks([])

        plt.show()


if __name__ == "__main__":
    main()
