#!/usr/bin/env python
"""
Staging file for generating simulations and running metadetect
"""

import argparse
import copy

import yaml
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from loguru import logger

import fitsio
import galsim

import shear_bias_sims.image_lattice


def get_args():
    parser = argparse.ArgumentParser()
    # parser.add_argument(
    #     "--config",
    #     type=str,
    #     required=True,
    #     help="Metadetection configuration file [yaml]",
    # )
    parser.add_argument(
        "--sim",
        type=str,
        required=True,
        help="GalSim configuration file [yaml]",
    )
    parser.add_argument(
        "--output",
        type=str,
        required=False,
        default=None,
        help="Output file [png, pdf]",
    )
    return parser.parse_args()


def main():
    """
    Run the simulation and measurement for metadetect noise bias cancellation.
    """
    args = get_args()

    # with open(args.config, "r") as fp:
    #     config = yaml.safe_load(fp.read())

    # # copy the config for safekeeping
    # _config = copy.deepcopy(config)

    logger.info(f"Visualizing: {vars(args)}")

    rng = np.random.default_rng()

    for galsim_config in galsim.config.ReadConfig(args.sim):
        # copy the config for safekeeping
        _galsim_config = copy.deepcopy(galsim_config)

        # build the image
        logger.info(f"Building image")
        image = galsim.config.BuildImage(galsim_config, logger=None)
        image_shape = (galsim_config["image_ysize"], galsim_config["image_xsize"])

        # build the PSF image
        logger.info(f"Building PSF image")
        psf_obj = galsim.config.BuildGSObject(galsim_config, "psf", logger=None)[0]
        psf_nx = 53  # N.B. this should must be odd as ngmix likes PSFs centered on a single pixel
        psf_ny = psf_nx
        psf = psf_obj.drawImage(nx=psf_nx, ny=psf_ny, scale=galsim_config["image"]["pixel_scale"])

        # build the weight image
        logger.info(f"Building weight image")
        weight = galsim.Image(np.zeros(image_shape))
        galsim.config.noise.AddNoiseVariance(galsim_config, weight, logger=None)  # TODO: check if we need to do this with a "clean" config
        weight.invertSelf()

        # build the noise image
        logger.info(f"Building noise image")
        noise = galsim.Image(np.zeros(image_shape))
        galsim.config.noise.AddNoise(galsim_config, noise, logger=None)  # TODO: check if we need to do this with a "clean" config

        fig, axs = plt.subplots(nrows=1, ncols=4)

        axs[0].imshow(image.array, origin="lower")
        axs[0].set_title("Image")

        axs[1].imshow(psf.array, origin="lower")
        axs[1].set_title("PSF")

        axs[2].imshow(weight.array, origin="lower")
        axs[2].set_title("Weight")

        axs[3].imshow(noise.array, origin="lower")
        axs[3].set_title("Noise Realization")

        for ax in axs.ravel():
            ax.set_xticks([])
            ax.set_yticks([])

        if args.output is None:
            plt.show()
        else:
            logger.info(f"Writing visualization to disk")
            plt.savefig(args.output)


if __name__ == "__main__":
    main()
