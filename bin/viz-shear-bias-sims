#!/usr/bin/env python
"""
Staging file for generating simulations and running metadetect
"""

import argparse
import copy

import yaml
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from loguru import logger

import fitsio
import galsim
import galsim_extra

from shear_bias_sims import run_utils


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--config",
        type=str,
        required=True,
        help="Metadetection configuration file [yaml]",
    )
    parser.add_argument(
        "--sim",
        type=str,
        required=True,
        help="GalSim configuration file [yaml]",
    )
    parser.add_argument(
        "--output",
        type=str,
        required=False,
        default=None,
        help="Output file [png, pdf]",
    )
    parser.add_argument(
        "--seed",
        type=int,
        required=False,
        default=None,
        help="RNG seed [int]",
    )
    return parser.parse_args()


def main():
    """
    Run the simulation and measurement for metadetect noise bias cancellation.
    """
    args = get_args()

    with open(args.config, "r") as fp:
        config = yaml.safe_load(fp.read())

    # copy the config for safekeeping
    _config = copy.deepcopy(config)

    logger.info(f"Visualizing: {vars(args)}")

    for galsim_config in galsim.config.ReadConfig(args.sim):
        # copy the config for safekeeping
        _galsim_config = copy.deepcopy(galsim_config)

        rng = np.random.default_rng(args.seed)
        mbobs = run_utils.observation_builder(
            config,
            galsim_config,
            rng=rng,
            logger=None,
        )

        for obslist in mbobs:
            for obs in obslist:

                fig, axs = plt.subplots(nrows=1, ncols=4)

                axs[0].imshow(obs.image, origin="lower")
                axs[0].set_title("Image")

                axs[1].imshow(obs.psf.image, origin="lower")
                axs[1].set_title("PSF")

                axs[2].imshow(obs.weight, origin="lower")
                axs[2].set_title("Weight")

                axs[3].imshow(obs.noise, origin="lower")
                axs[3].set_title("Noise Realization")

                for ax in axs.ravel():
                    ax.set_xticks([])
                    ax.set_yticks([])

        if args.output is None:
            plt.show()
        else:
            logger.info(f"Writing visualization to disk")
            plt.savefig(args.output)


if __name__ == "__main__":
    main()
